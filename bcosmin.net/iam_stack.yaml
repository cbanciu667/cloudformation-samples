AWSTemplateFormatVersion: 2010-09-09
Description: bcosmin.net - IAM stack - v1.2.2
Parameters: {}
Mappings: {}
Metadata: {}
Conditions: {}
Resources:
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonVPCFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
      Path: /
      Policies: []


  VPNInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonVPCReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy'
      Path: /
      Policies:
        - PolicyName: !Join
            - ''
            - - VPNInstancePolicy
              - !Ref 'AWS::StackName'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:*Get*'
                  - 's3:*List*'
                  - 's3:*Put*'
                Effect: Allow
                Resource:
                  - 'arn:aws:s3:::bcosmin-net-data/*'
                  - 'arn:aws:s3:::bcosmin-net-logs/*'
                  - 'arn:aws:s3:::bcosmin-net-data'
                  - 'arn:aws:s3:::bcosmin-net-logs'
                  - 'arn:aws:s3:::bcosmin-net-config/*'
                  - 'arn:aws:s3:::bcosmin-net-config'
              - Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInstanceStatus'
                  - 'ec2:GetConsoleOutput'
                  - 'ec2:AssociateAddress'
                  - 'ec2:DescribeAddresses'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:CreateSnapshot'
                  - 'ec2:DescribeVolumes'
                  - 'ec2:DescribeSnapshots'
                  - 'ec2:CreateTags'
                Effect: Allow
                Resource:
                  - '*'
              - Action:
                  - 'servicediscovery:*'
                  - 'route53:CreateHealthCheck'
                  - 'route53:GetHostedZone'
                  - 'route53:ChangeResourceRecordSets'
                  - 'route53:List*'
                  - 'route53:GetHealthCheck'
                  - 'route53:UpdateHealthCheck'
                Effect: Allow
                Resource:
                  - '*'
  VPNInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref VPNInstanceRole


  WPInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy'
      Path: /
      Policies:
        - PolicyName: !Join
            - ''
            - - WPInstancePolicy
              - !Ref 'AWS::StackName'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:*Get*'
                  - 's3:*List*'
                  - 's3:*Put*'
                Effect: Allow
                Resource:
                  - 'arn:aws:s3:::bcosmin-net-data/*'
                  - 'arn:aws:s3:::bcosmin-net-logs/*'
                  - 'arn:aws:s3:::bcosmin-net-data'
                  - 'arn:aws:s3:::bcosmin-net-logs'
              - Action:
                  - 'cloudwatch:PutMetricData'
                Effect: Allow
                Resource: '*'
              - Action:
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:DescribeLogStreams'
                  - 'logs:DescribeLogGroups'
                Resource:
                  - '*'
                Effect: Allow
              - Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInstanceStatus'
                  - 'ec2:GetConsoleOutput'
                  - 'ec2:AssociateAddress'
                  - 'ec2:DescribeAddresses'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:CreateSnapshot'
                  - 'ec2:DescribeVolumes'
                  - 'ec2:DescribeSnapshots'
                  - 'ec2:CreateTags'
                Effect: Allow
                Resource:
                  - '*'
              - Action:
                  - 'servicediscovery:*'
                  - 'route53:CreateHealthCheck'
                  - 'route53:GetHostedZone'
                  - 'route53:ChangeResourceRecordSets'
                  - 'route53:List*'
                  - 'route53:GetHealthCheck'
                  - 'route53:UpdateHealthCheck'
                Effect: Allow
                Resource:
                  - '*'
  WPInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref WPInstanceRole


  CDeployInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy'
      Path: /
      Policies:
        - PolicyName: !Join
            - ''
            - - CDeployInstancePolicy
              - !Ref 'AWS::StackName'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:*Get*'
                  - 's3:*List*'
                  - 's3:*Put*'
                Effect: Allow
                Resource:
                  - 'arn:aws:s3:::bcosmin-net-codedeploy/*'
                  - 'arn:aws:s3:::bcosmin-net-logs/*'
                  - 'arn:aws:s3:::bcosmin-net-codedeploy'
                  - 'arn:aws:s3:::bcosmin-net-logs'
              - Action:
                  - 's3:*Get*'
                  - 's3:*List*'
                Effect: Allow
                Resource:
                  - 'arn:aws:s3:::bcosmin-net-config/*'
                  - 'arn:aws:s3:::bcosmin-net-config'
              - Action:
                  - 'cloudwatch:PutMetricData'
                Effect: Allow
                Resource: '*'
              - Action:
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:DescribeLogStreams'
                  - 'logs:DescribeLogGroups'
                Resource:
                  - '*'
                Effect: Allow
              - Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInstanceStatus'
                  - 'ec2:GetConsoleOutput'
                  - 'ec2:AssociateAddress'
                  - 'ec2:DescribeAddresses'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:CreateSnapshot'
                  - 'ec2:DescribeVolumes'
                  - 'ec2:DescribeSnapshots'
                  - 'ec2:CreateTags'
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                Effect: Allow
                Resource:
                  - '*'
              - Action:
                  - 'servicediscovery:*'
                  - 'route53:CreateHealthCheck'
                  - 'route53:GetHostedZone'
                  - 'route53:ChangeResourceRecordSets'
                  - 'route53:List*'
                  - 'route53:GetHealthCheck'
                  - 'route53:UpdateHealthCheck'
                Effect: Allow
                Resource:
                  - '*'
  CDeployInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref CDeployInstanceRole

  BeanstalkInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - elasticbeanstalk.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy'
      Path: /
      Policies:
        - PolicyName: !Join
            - ''
            - - BeanstalkInstancePolicy
              - !Ref 'AWS::StackName'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:*Get*'
                  - 's3:*List*'
                  - 's3:*Put*'
                Effect: Allow
                Resource:
                  - 'arn:aws:s3:::bcosmin-net-beanstalk/*'
                  - 'arn:aws:s3:::bcosmin-net-logs/*'
                  - 'arn:aws:s3:::bcosmin-net-beanstalk'
                  - 'arn:aws:s3:::bcosmin-net-logs'
              - Action:
                  - 's3:*Get*'
                  - 's3:*List*'
                Effect: Allow
                Resource:
                  - 'arn:aws:s3:::bcosmin-net-config/*'
                  - 'arn:aws:s3:::bcosmin-net-config'
              - Action:
                  - 'cloudwatch:PutMetricData'
                Effect: Allow
                Resource: '*'
              - Action:
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:DescribeLogStreams'
                  - 'logs:DescribeLogGroups'
                Resource:
                  - '*'
                Effect: Allow
              - Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInstanceStatus'
                  - 'ec2:GetConsoleOutput'
                  - 'ec2:AssociateAddress'
                  - 'ec2:DescribeAddresses'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:CreateSnapshot'
                  - 'ec2:DescribeVolumes'
                  - 'ec2:DescribeSnapshots'
                  - 'ec2:CreateTags'
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                Effect: Allow
                Resource:
                  - '*'
              - Action:
                  - 'servicediscovery:*'
                  - 'route53:CreateHealthCheck'
                  - 'route53:GetHostedZone'
                  - 'route53:ChangeResourceRecordSets'
                  - 'route53:List*'
                  - 'route53:GetHealthCheck'
                  - 'route53:UpdateHealthCheck'
                Effect: Allow
                Resource:
                  - '*'
  BeanstalkInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref BeanstalkInstanceRole


  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action:
            - 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
              - application-autoscaling.amazonaws.com
      Policies:
        - PolicyName: ecs-service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - ecs:DescribeServices
                  - ecs:UpdateService

  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy'
      Path: /
      RoleName: !Sub ECSInstanceRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - ecs:CreateCluster
                - ecs:DeregisterContainerInstance
                - ecs:DiscoverPollEndpoint
                - ecs:Poll
                - ecs:RegisterContainerInstance
                - ecs:StartTelemetrySession
                - ecs:Submit*
                - logs:CreateLogStream
                - logs:PutLogEvents
                - ecr:BatchCheckLayerAvailability
                - ecr:BatchGetImage
                - ecr:GetDownloadUrlForLayer
                - ecr:GetAuthorizationToken
                - ec2messages:AcknowledgeMessage
                - ec2messages:DeleteMessage
                - ec2messages:FailMessage
                - ec2messages:GetEndpoint
                - ec2messages:GetMessages
                - ec2messages:SendReply
                - cloudwatch:PutMetricData
                - ec2:DescribeInstanceStatus
                - ds:CreateComputer
                - ds:DescribeDirectories
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
                - logs:PutLogEvents
                - s3:PutObject
                - s3:GetObject
                - s3:AbortMultipartUpload
                - s3:ListMultipartUploadParts
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - dynamodb:*
                - servicediscovery:*
                - route53:CreateHealthCheck
                - route53:GetHostedZone
                - route53:ChangeResourceRecordSets
                - route53:List*
                - route53:GetHealthCheck
                - route53:UpdateHealthCheck
              Resource:
                - '*'
  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSInstanceRole


Outputs:
  VPNInstanceProfile:
    Description: VPN Instance Profile
    Value: !Ref VPNInstanceProfile
    Export:
      Name: !Sub '${AWS::StackName}-VPNInstanceProfile'
  VPNInstanceRoleArn:
    Description: VPN Instance Role ARN
    Value: !GetAtt
      - VPNInstanceRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}-VPNInstanceRoleArn'
  VPNInstanceRole:
    Description: VPN Instance Role
    Value: !Ref VPNInstanceRole
    Export:
      Name: !Sub '${AWS::StackName}-VPNInstanceRole'
  WPInstanceProfile:
    Description: WP Instance Profile
    Value: !Ref WPInstanceProfile
    Export:
      Name: !Sub '${AWS::StackName}-WPInstanceProfile'
  WPInstanceRoleArn:
    Description: WP Instance Role ARN
    Value: !GetAtt
      - WPInstanceRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}-WPInstanceRoleArn'
  WPInstanceRole:
    Description: WP Instance Role
    Value: !Ref WPInstanceRole
    Export:
      Name: !Sub '${AWS::StackName}-WPInstanceRole'
  CDeployInstanceProfile:
    Description: CDeploy Instance Profile
    Value: !Ref CDeployInstanceProfile
    Export:
      Name: !Sub '${AWS::StackName}-CDeployInstanceProfile'
  CDeployInstanceRoleArn:
    Description: CDeploy Instance Role ARN
    Value: !GetAtt
      - CDeployInstanceRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}-CDeployInstanceRoleArn'
  CDeployInstanceRole:
    Description: CDeploy Instance Role
    Value: !Ref CDeployInstanceRole
    Export:
      Name: !Sub '${AWS::StackName}-CDeployInstanceRole'
  BeanstalkInstanceProfile:
    Description: Beanstalk Instance Profile
    Value: !Ref BeanstalkInstanceProfile
    Export:
      Name: !Sub '${AWS::StackName}-BeanstalkInstanceProfile'
  BeanstalkInstanceRoleArn:
    Description: Beanstalk Instance Role ARN
    Value: !GetAtt
      - BeanstalkInstanceRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}-BeanstalkInstanceRoleArn'
  BeanstalkInstanceRole:
    Description: Beanstalk Instance Role
    Value: !Ref BeanstalkInstanceRole
    Export:
      Name: !Sub '${AWS::StackName}-BeanstalkInstanceRole'
  ECSInstanceProfile:
    Description: ECS Instance Profile
    Value: !Ref ECSInstanceProfile
    Export:
      Name: !Sub '${AWS::StackName}-ECSInstanceProfile'
  ECSInstanceRoleArn:
    Description: ECS Instance Role ARN
    Value: !GetAtt
      - ECSInstanceRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}-ECSInstanceRoleArn'
  ECSInstanceRole:
    Description: ECS Instance Role
    Value: !Ref ECSInstanceRole
    Export:
      Name: !Sub '${AWS::StackName}-ECSInstanceRole'
  ECSServiceAutoScalingRoleArn:
    Description: ECS Service Role
    Value: !GetAtt
      - ECSServiceAutoScalingRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}-ECSServiceAutoScalingRoleArn'
  ECSServiceAutoScalingRole:
    Description: ECS Service Role
    Value: !Ref ECSServiceAutoScalingRole
    Export:
      Name: !Sub '${AWS::StackName}-ECSServiceAutoScalingRole'
  LambdaRoleArn:
    Description: bcosmin.net Lambda Role ARN
    Value: !GetAtt
      - LambdaRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaRoleArn'
